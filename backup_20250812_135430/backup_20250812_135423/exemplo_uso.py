#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Exemplo de uso do FTM - Follow the Money v2.0
Demonstra as funcionalidades melhoradas do m√≥dulo analyze.py

Autor: Thiago Oliveira Castro Vieira
Vers√£o: 2.0
"""

import logging
from ftm.analyze import analyze

# Configurar logging para ver o progresso detalhado
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

def demonstrar_melhorias():
    """
    Demonstra as principais melhorias implementadas na vers√£o 2.0
    """
    print("üöÄ FTM - Follow the Money v2.0")
    print("=" * 50)
    print("Demonstra√ß√£o das melhorias implementadas:\n")
    
    print("‚úÖ Paraleliza√ß√£o na busca de subdom√≠nios")
    print("‚úÖ Biblioteca requests para maior robustez")
    print("‚úÖ Retry autom√°tico para falhas tempor√°rias")
    print("‚úÖ Verifica√ß√£o segura de certificados SSL")
    print("‚úÖ Consultas DNS otimizadas")
    print("‚úÖ Sistema de logging profissional")
    print("‚úÖ Tratamento correto de timezone brasileiro")
    print("‚úÖ Documenta√ß√£o completa com docstrings")
    print("‚úÖ Corre√ß√µes de bugs e melhor tratamento de erros\n")

def analisar_dominio_completo(dominio):
    """
    Realiza an√°lise completa de um dom√≠nio e exibe os resultados formatados.
    
    Args:
        dominio (str): O dom√≠nio a ser analisado
    """
    print(f"üîç Iniciando an√°lise completa de: {dominio}")
    print("-" * 60)
    
    try:
        # Executar an√°lise
        resultados = analyze(dominio)
        
        # Desempacotar resultados
        horario, whois, ssl, dns, subdominios, ids, links, tecnologias, contatos = resultados
        
        # Exibir resultados formatados
        print("\nüìä RELAT√ìRIO DE AN√ÅLISE")
        print("=" * 60)
        
        print(f"\nüïê Hor√°rio Oficial (NTP Brasil):")
        print(f"   {horario}")
        
        print(f"\nüìã Informa√ß√µes WHOIS:")
        whois_lines = whois.split('\n')[:5]  # Primeiras 5 linhas
        for line in whois_lines:
            if line.strip():
                print(f"   {line}")
        if len(whois.split('\n')) > 5:
            print("   ... (mais informa√ß√µes dispon√≠veis)")
        
        print(f"\nüîí Certificado SSL:")
        ssl_lines = ssl.split('\n')[:3]  # Primeiras 3 linhas
        for line in ssl_lines:
            if line.strip():
                print(f"   {line}")
        
        print(f"\nüåê Registros DNS:")
        dns_lines = dns.split('\n')[:6]  # Primeiros 6 registros
        for line in dns_lines:
            if line.strip():
                print(f"   {line}")
        
        print(f"\nüîç Subdom√≠nios Encontrados:")
        if subdominios and len(subdominios.strip()) > 0:
            subdominios_list = subdominios.split('\n')[:5]
            for subdominio in subdominios_list:
                if subdominio.strip():
                    print(f"   {subdominio}")
            if len(subdominios.split('\n')) > 5:
                print("   ... (mais subdom√≠nios encontrados)")
        else:
            print("   Nenhum subdom√≠nio adicional encontrado")
        
        print(f"\nüÜî IDs de Rastreamento:")
        if ids and len(ids.strip()) > 0:
            ids_lines = ids.split('\n')[:3]
            for line in ids_lines:
                if line.strip():
                    print(f"   {line}")
        else:
            print("   Nenhum ID de rastreamento encontrado")
        
        print(f"\n‚öôÔ∏è Tecnologias Detectadas:")
        if tecnologias and len(tecnologias.strip()) > 0:
            tech_lines = tecnologias.split('\n')[:5]
            for line in tech_lines:
                if line.strip():
                    print(f"   {line}")
        else:
            print("   Nenhuma tecnologia espec√≠fica detectada")
        
        print(f"\nüìû Informa√ß√µes de Contato:")
        if contatos and len(contatos.strip()) > 0:
            contact_lines = contatos.split('\n')[:3]
            for line in contact_lines:
                if line.strip():
                    print(f"   {line}")
        else:
            print("   Nenhuma informa√ß√£o de contato encontrada")
        
        print("\n‚úÖ An√°lise conclu√≠da com sucesso!")
        
    except Exception as e:
        print(f"‚ùå Erro durante a an√°lise: {e}")
        logging.error(f"Erro na an√°lise de {dominio}: {e}")

def exemplo_uso_basico():
    """
    Exemplo b√°sico de uso da fun√ß√£o analyze
    """
    print("\nüìù EXEMPLO DE USO B√ÅSICO")
    print("=" * 40)
    
    codigo_exemplo = '''
# Importar a fun√ß√£o
from ftm.analyze import analyze

# Analisar um dom√≠nio
resultados = analyze('exemplo.com')

# Desempacotar os resultados
horario, whois, ssl, dns, subdominios, ids, links, tecnologias, contatos = resultados

# Usar as informa√ß√µes
print(f"Hor√°rio: {horario}")
print(f"WHOIS: {whois[:100]}...")  # Primeiros 100 caracteres
print(f"SSL: {ssl[:100]}...")     # Primeiros 100 caracteres
'''
    
    print(codigo_exemplo)

def main():
    """
    Fun√ß√£o principal - demonstra o uso do FTM v2.0
    """
    demonstrar_melhorias()
    
    # Solicitar dom√≠nio para an√°lise
    print("\n" + "=" * 60)
    dominio = input("Digite um dom√≠nio para an√°lise (ex: example.com): ").strip()
    
    if dominio:
        analisar_dominio_completo(dominio)
    else:
        print("\nüîç Executando an√°lise de exemplo com 'example.com'...")
        analisar_dominio_completo('example.com')
    
    exemplo_uso_basico()
    
    print("\n" + "=" * 60)
    print("üìö Para mais informa√ß√µes, consulte o README.md")
    print("üêõ Para reportar bugs ou sugest√µes, abra uma issue no GitHub")
    print("‚öñÔ∏è  Lembre-se: use apenas em dom√≠nios pr√≥prios ou com autoriza√ß√£o!")

if __name__ == "__main__":
    main()